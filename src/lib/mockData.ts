import { 
  Payment, 
  Expense, 
  Employee, 
  ContractualEmployee,
  FixedEmployee,
  EmployeeType,
  EmployeeRole,
  EmployeeStatus,
  PaymentStats, 
  ExpenseStats, 
  EmployeeStats,
  DashboardStats,
  UserSettings,
  SystemSettings,
  EmployeeActivity
} from '@/types'
import { generateId } from './utils'

// ============ PAYMENT MOCK DATA ============
export const mockPayments: Payment[] = [
  {
    id: generateId(),
    amount: 2500.00,
    currency: 'USD',
    status: 'completed',
    type: 'credit',
    method: 'credit_card',
    description: 'Payment from ABC Corporation',
    reference: 'PAY-2024-001',
    customerId: 'cust_001',
    customerName: 'ABC Corporation',
    customerEmail: 'billing@abc-corp.com',
    transactionFee: 75.00,
    netAmount: 2425.00,
    createdAt: new Date('2024-01-15T10:30:00Z'),
    updatedAt: new Date('2024-01-15T10:32:00Z'),
  },
  {
    id: generateId(),
    amount: 1800.00,
    currency: 'USD',
    status: 'completed',
    type: 'credit',
    method: 'bank_transfer',
    description: 'Consulting services payment',
    reference: 'PAY-2024-002',
    customerId: 'cust_002',
    customerName: 'XYZ Ltd',
    customerEmail: 'finance@xyz-ltd.com',
    transactionFee: 5.00,
    netAmount: 1795.00,
    createdAt: new Date('2024-01-14T14:20:00Z'),
    updatedAt: new Date('2024-01-14T14:22:00Z'),
  },
  {
    id: generateId(),
    amount: 950.00,
    currency: 'USD',
    status: 'pending',
    type: 'credit',
    method: 'digital_wallet',
    description: 'E-commerce order payment',
    reference: 'PAY-2024-003',
    customerId: 'cust_003',
    customerName: 'John Smith',
    customerEmail: 'john.smith@email.com',
    transactionFee: 28.50,
    netAmount: 921.50,
    createdAt: new Date('2024-01-16T09:15:00Z'),
    updatedAt: new Date('2024-01-16T09:15:00Z'),
  },
  {
    id: generateId(),
    amount: 500.00,
    currency: 'USD',
    status: 'failed',
    type: 'credit',
    method: 'credit_card',
    description: 'Subscription renewal',
    reference: 'PAY-2024-004',
    customerId: 'cust_004',
    customerName: 'Tech Innovations Inc',
    customerEmail: 'admin@tech-innovations.com',
    createdAt: new Date('2024-01-13T16:45:00Z'),
    updatedAt: new Date('2024-01-13T16:47:00Z'),
  },
]

export const mockPaymentStats: PaymentStats = {
  totalPayments: 2350,
  totalAmount: 45231.89,
  pendingAmount: 2800.50,
  completedAmount: 42431.39,
  failedAmount: 1250.00,
  avgTransactionValue: 192.48,
  dailyChange: 8.5,
  weeklyChange: 12.3,
  monthlyChange: 20.1,
}

// ============ EXPENSE MOCK DATA ============
export const mockExpenses: Expense[] = [
  {
    id: generateId(),
    amount: 2500.00,
    currency: 'USD',
    category: 'setup_purchase',
    status: 'approved',
    description: 'New computer setup and peripherals',
    date: new Date('2024-01-15'),
    employeeId: 'emp_001',
    employeeName: 'John Doe',
    receipt: 'receipt_001.pdf',
    approvedBy: 'manager_001',
    approvedAt: new Date('2024-01-16T10:00:00Z'),
    tags: ['equipment', 'setup', 'hardware'],
    createdAt: new Date('2024-01-15T08:30:00Z'),
    updatedAt: new Date('2024-01-16T10:00:00Z'),
  },
  {
    id: generateId(),
    amount: 1800.00,
    currency: 'USD',
    category: 'rent_bill_guest',
    status: 'paid',
    description: 'Monthly office rent payment',
    date: new Date('2024-01-01'),
    employeeId: 'emp_002',
    employeeName: 'Sarah Wilson',
    receipt: 'receipt_002.pdf',
    tags: ['rent', 'monthly', 'office'],
    isRecurring: true,
    recurringFrequency: 'monthly',
    createdAt: new Date('2024-01-01T09:00:00Z'),
    updatedAt: new Date('2024-01-01T09:00:00Z'),
  },
  {
    id: generateId(),
    amount: 850.75,
    currency: 'USD',
    category: 'material',
    status: 'approved',
    description: 'Raw materials for production',
    date: new Date('2024-01-12'),
    employeeId: 'emp_003',
    employeeName: 'Mike Johnson',
    approvedBy: 'manager_001',
    approvedAt: new Date('2024-01-13T14:00:00Z'),
    tags: ['materials', 'production', 'inventory'],
    createdAt: new Date('2024-01-12T11:20:00Z'),
    updatedAt: new Date('2024-01-13T14:00:00Z'),
  },
  {
    id: generateId(),
    amount: 425.50,
    currency: 'USD',
    category: 'logistic',
    status: 'submitted',
    description: 'Shipping and delivery charges',
    date: new Date('2024-01-10'),
    employeeId: 'emp_004',
    employeeName: 'Emily Davis',
    tags: ['shipping', 'delivery', 'logistics'],
    createdAt: new Date('2024-01-10T18:45:00Z'),
    updatedAt: new Date('2024-01-10T18:45:00Z'),
  },
  {
    id: generateId(),
    amount: 1200.00,
    currency: 'USD',
    category: 'outsource',
    status: 'approved',
    description: 'Freelance development services',
    date: new Date('2024-01-08'),
    employeeId: 'emp_005',
    employeeName: 'Alex Chen',
    receipt: 'receipt_005.pdf',
    approvedBy: 'manager_002',
    approvedAt: new Date('2024-01-09T16:00:00Z'),
    tags: ['freelance', 'development', 'outsource'],
    createdAt: new Date('2024-01-08T14:30:00Z'),
    updatedAt: new Date('2024-01-09T16:00:00Z'),
  },
  {
    id: generateId(),
    amount: 350.00,
    currency: 'USD',
    category: 'rent_bill_guest',
    status: 'approved',
    description: 'Electricity and internet bills',
    date: new Date('2024-01-05'),
    employeeId: 'emp_002',
    employeeName: 'Sarah Wilson',
    receipt: 'receipt_006.pdf',
    approvedBy: 'manager_001',
    approvedAt: new Date('2024-01-06T11:00:00Z'),
    tags: ['bills', 'utilities', 'monthly'],
    isRecurring: true,
    recurringFrequency: 'monthly',
    createdAt: new Date('2024-01-05T10:00:00Z'),
    updatedAt: new Date('2024-01-06T11:00:00Z'),
  },
  {
    id: generateId(),
    amount: 680.25,
    currency: 'USD',
    category: 'material',
    status: 'submitted',
    description: 'Quality packaging materials',
    date: new Date('2024-01-18'),
    employeeId: 'emp_006',
    employeeName: 'Lisa Brown',
    tags: ['packaging', 'materials', 'quality'],
    createdAt: new Date('2024-01-18T13:15:00Z'),
    updatedAt: new Date('2024-01-18T13:15:00Z'),
  },
  {
    id: generateId(),
    amount: 750.00,
    currency: 'USD',
    category: 'logistic',
    status: 'approved',
    description: 'Warehouse storage and handling',
    date: new Date('2024-01-14'),
    employeeId: 'emp_007',
    employeeName: 'David Lee',
    receipt: 'receipt_007.pdf',
    approvedBy: 'manager_002',
    approvedAt: new Date('2024-01-15T09:30:00Z'),
    tags: ['warehouse', 'storage', 'handling'],
    createdAt: new Date('2024-01-14T16:20:00Z'),
    updatedAt: new Date('2024-01-15T09:30:00Z'),
  },
  {
    id: generateId(),
    amount: 1500.00,
    currency: 'USD',
    category: 'setup_purchase',
    status: 'submitted',
    description: 'Office furniture and fixtures',
    date: new Date('2024-01-20'),
    employeeId: 'emp_008',
    employeeName: 'Jennifer Taylor',
    tags: ['furniture', 'office', 'setup'],
    createdAt: new Date('2024-01-20T11:45:00Z'),
    updatedAt: new Date('2024-01-20T11:45:00Z'),
  },
  {
    id: generateId(),
    amount: 950.00,
    currency: 'USD',
    category: 'outsource',
    status: 'rejected',
    description: 'External consulting - insufficient documentation',
    date: new Date('2024-01-16'),
    employeeId: 'emp_009',
    employeeName: 'Robert Kim',
    rejectionReason: 'Contract details and scope not clearly defined',
    tags: ['consulting', 'external', 'advisory'],
    createdAt: new Date('2024-01-16T12:30:00Z'),
    updatedAt: new Date('2024-01-17T14:20:00Z'),
  },
]

export const mockExpenseStats: ExpenseStats = {
  totalExpenses: 1245,
  totalAmount: 15680.50,
  pendingAmount: 1430.25,
  approvedAmount: 13300.25,
  rejectedAmount: 950.00,
  avgExpenseValue: 125.85,
  expensesByCategory: {
    setup_purchase: 4000.00,
    rent_bill_guest: 2150.00,
    material: 1530.00,
    logistic: 1175.50,
    outsource: 6825.00,
  },
  monthlyTrend: [
    { month: 'Jan', amount: 3150.50, count: 165 },
    { month: 'Feb', amount: 2980.25, count: 142 },
    { month: 'Mar', amount: 2850.75, count: 138 },
    { month: 'Apr', amount: 2675.50, count: 156 },
    { month: 'May', amount: 2300.25, count: 127 },
    { month: 'Jun', amount: 1723.25, count: 115 },
  ],
}

// ============ EMPLOYEE MOCK DATA ============

// Work Records
const workRecord1 = {
  id: generateId(),
  employeeId: 'emp_contractual_001',
  date: new Date('2024-01-15'),
  description: 'Frontend development for client dashboard',
  quantity: 8,
  price: 25.00,
  total: 200.00,
  createdAt: new Date('2024-01-15T18:00:00Z'),
  updatedAt: new Date('2024-01-15T18:00:00Z'),
}

const workRecord2 = {
  id: generateId(),
  employeeId: 'emp_contractual_001',
  date: new Date('2024-01-18'),
  description: 'API integration and testing',
  quantity: 6,
  price: 25.00,
  total: 150.00,
  createdAt: new Date('2024-01-18T17:30:00Z'),
  updatedAt: new Date('2024-01-18T17:30:00Z'),
}

const workRecord3 = {
  id: generateId(),
  employeeId: 'emp_contractual_002',
  date: new Date('2024-01-20'),
  description: 'UI/UX design for mobile app',
  quantity: 4,
  price: 30.00,
  total: 120.00,
  createdAt: new Date('2024-01-20T16:00:00Z'),
  updatedAt: new Date('2024-01-20T16:00:00Z'),
}

// Salary Payments
const salaryPayment1 = {
  id: generateId(),
  employeeId: 'emp_contractual_001',
  amount: 300.00,
  paymentDate: new Date('2024-01-20'),
  workRecordIds: [workRecord1.id, workRecord2.id],
  isAdvanceDeduction: false,
  notes: 'Payment for week 1-3 work',
  createdAt: new Date('2024-01-20T10:00:00Z'),
  updatedAt: new Date('2024-01-20T10:00:00Z'),
}

// Advance Payments
const advancePayment1 = {
  id: generateId(),
  employeeId: 'emp_contractual_001',
  amount: 50.00,
  paymentDate: new Date('2024-01-10'),
  reason: 'Emergency medical expense',
  notes: 'To be deducted from next salary',
  createdAt: new Date('2024-01-10T14:00:00Z'),
  updatedAt: new Date('2024-01-10T14:00:00Z'),
}

// Fixed Salary Payments
const fixedSalaryPayment1 = {
  id: generateId(),
  employeeId: 'emp_fixed_001',
  amount: 5000.00,
  paymentDate: new Date('2024-01-01'),
  month: '2024-01',
  notes: 'January salary payment',
  createdAt: new Date('2024-01-01T10:00:00Z'),
  updatedAt: new Date('2024-01-01T10:00:00Z'),
}

const fixedSalaryPayment2 = {
  id: generateId(),
  employeeId: 'emp_fixed_002',
  amount: 4200.00,
  paymentDate: new Date('2024-01-01'),
  month: '2024-01',
  notes: 'January salary payment',
  createdAt: new Date('2024-01-01T10:00:00Z'),
  updatedAt: new Date('2024-01-01T10:00:00Z'),
}

// Overtime Records
const overtimeRecord1 = {
  id: generateId(),
  employeeId: 'emp_fixed_001',
  date: new Date('2024-01-15'),
  hours: 4,
  rate: 30.00,
  amount: 120.00,
  total: 120.00,
  description: 'Weekend development work for urgent client project',
  createdAt: new Date('2024-01-15T20:00:00Z'),
  updatedAt: new Date('2024-01-15T20:00:00Z'),
}

const overtimeRecord2 = {
  id: generateId(),
  employeeId: 'emp_fixed_001',
  date: new Date('2024-01-22'),
  hours: 3,
  rate: 30.00,
  amount: 90.00,
  total: 90.00,
  description: 'Late night deployment and monitoring',
  createdAt: new Date('2024-01-22T23:00:00Z'),
  updatedAt: new Date('2024-01-22T23:00:00Z'),
}

const overtimeRecord3 = {
  id: generateId(),
  employeeId: 'emp_fixed_002',
  date: new Date('2024-01-20'),
  hours: 2,
  rate: 25.00,
  amount: 50.00,
  total: 50.00,
  description: 'Month-end financial reporting',
  createdAt: new Date('2024-01-20T19:00:00Z'),
  updatedAt: new Date('2024-01-20T19:00:00Z'),
}

export const mockEmployees: Employee[] = [
  // Contractual Employees
  {
    id: 'emp_contractual_001',
    firstName: 'Alex',
    lastName: 'Johnson',
    phone: '+1-555-0123',
    role: 'developer',
    type: 'contractual',
    status: 'active',
    hireDate: new Date('2024-01-01'),
    totalEarned: 350.00,
    advancePaid: 50.00,
    balance: 300.00,
    workRecords: [workRecord1, workRecord2],
    salaryPayments: [salaryPayment1],
    advances: [advancePayment1],
    notes: 'Excellent frontend developer with React expertise',
    createdAt: new Date('2024-01-01T09:00:00Z'),
    updatedAt: new Date('2024-01-20T10:00:00Z'),
  },
  {
    id: 'emp_contractual_002',
    firstName: 'Maria',
    lastName: 'Garcia',
    phone: '+1-555-0124',
    role: 'designer',
    type: 'contractual',
    status: 'active',
    hireDate: new Date('2024-01-15'),
    totalEarned: 120.00,
    advancePaid: 0.00,
    balance: 120.00,
    workRecords: [workRecord3],
    salaryPayments: [],
    advances: [],
    notes: 'Creative UI/UX designer with modern design approach',
    createdAt: new Date('2024-01-15T09:00:00Z'),
    updatedAt: new Date('2024-01-20T16:00:00Z'),
  },
  {
    id: 'emp_contractual_003',
    firstName: 'David',
    lastName: 'Chen',
    phone: '+1-555-0125',
    role: 'contractor',
    type: 'contractual',
    status: 'active',
    hireDate: new Date('2023-12-01'),
    totalEarned: 2800.00,
    advancePaid: 200.00,
    balance: 2600.00,
    workRecords: [],
    salaryPayments: [],
    advances: [],
    notes: 'Senior contractor for backend development',
    createdAt: new Date('2023-12-01T09:00:00Z'),
    updatedAt: new Date('2024-01-21T14:30:00Z'),
  },

  // Fixed Salary Employees
  {
    id: 'emp_fixed_001',
    firstName: 'Sarah',
    lastName: 'Wilson',
    phone: '+1-555-0126',
    role: 'manager',
    type: 'fixed',
    status: 'active',
    hireDate: new Date('2022-03-15'),
    monthlySalary: 5000.00,
    paidAmount: 5000.00,
    balance: 210.00,
    salaryPayments: [fixedSalaryPayment1],
    overtimeRecords: [overtimeRecord1, overtimeRecord2],
    notes: 'Team lead for development department',
    createdAt: new Date('2022-03-15T09:00:00Z'),
    updatedAt: new Date('2024-01-01T10:00:00Z'),
  },
  {
    id: 'emp_fixed_002',
    firstName: 'Michael',
    lastName: 'Brown',
    phone: '+1-555-0127',
    role: 'accountant',
    type: 'fixed',
    status: 'active',
    hireDate: new Date('2023-06-01'),
    monthlySalary: 4200.00,
    paidAmount: 4200.00,
    balance: 50.00,
    salaryPayments: [fixedSalaryPayment2],
    overtimeRecords: [overtimeRecord3],
    notes: 'Financial analyst and accounting specialist',
    createdAt: new Date('2023-06-01T09:00:00Z'),
    updatedAt: new Date('2024-01-15T11:20:00Z'),
  },
  {
    id: 'emp_fixed_003',
    firstName: 'Jennifer',
    lastName: 'Taylor',
    phone: '+1-555-0128',
    role: 'hr',
    type: 'fixed',
    status: 'active',
    hireDate: new Date('2023-08-15'),
    monthlySalary: 3800.00,
    paidAmount: 3800.00,
    balance: 0.00,
    salaryPayments: [],
    overtimeRecords: [],
    notes: 'HR specialist handling recruitment and employee relations',
    createdAt: new Date('2023-08-15T09:00:00Z'),
    updatedAt: new Date('2024-01-10T15:45:00Z'),
  },
  {
    id: 'emp_fixed_004',
    firstName: 'Robert',
    lastName: 'Kim',
    phone: '+1-555-0129',
    role: 'sales',
    type: 'fixed',
    status: 'active',
    hireDate: new Date('2023-09-01'),
    monthlySalary: 3500.00,
    paidAmount: 3200.00,
    balance: 300.00,
    salaryPayments: [],
    overtimeRecords: [],
    notes: 'Sales representative with excellent client relationships',
    createdAt: new Date('2023-09-01T09:00:00Z'),
    updatedAt: new Date('2024-01-18T12:30:00Z'),
  },
]

export const mockEmployeeStats: EmployeeStats = {
  totalEmployees: 7,
  activeEmployees: 7,
  inactiveEmployees: 0,
  contractualEmployees: 3,
  fixedEmployees: 4,
  totalContractualEarned: 3270.00,
  totalFixedSalaries: 16500.00,
  totalAdvancesPaid: 250.00,
  employeesByRole: {
    admin: 0,
    manager: 1,
    employee: 0,
    contractor: 1,
    intern: 0,
    developer: 1,
    designer: 1,
    accountant: 1,
    hr: 1,
    sales: 1,
  },
  avgContractualEarning: 1090.00,
  avgFixedSalary: 4125.00,
}

export const mockEmployeeActivities: EmployeeActivity[] = [
  {
    id: generateId(),
    employeeId: 'emp_001',
    action: 'login',
    description: 'Logged into dashboard',
    timestamp: new Date('2024-01-16T09:15:00Z'),
  },
  {
    id: generateId(),
    employeeId: 'emp_002',
    action: 'expense_submitted',
    description: 'Submitted expense report for client lunch',
    timestamp: new Date('2024-01-14T15:30:00Z'),
    metadata: { expenseId: 'exp_002', amount: 85.50 },
  },
  {
    id: generateId(),
    employeeId: 'emp_003',
    action: 'profile_updated',
    description: 'Updated contact information',
    timestamp: new Date('2024-01-12T14:20:00Z'),
  },
]

// ============ SETTINGS MOCK DATA ============
export const mockUserSettings: UserSettings = {
  theme: 'system',
  language: 'en-US',
  timezone: 'America/New_York',
  dateFormat: 'MM/dd/yyyy',
  timeFormat: '12h',
  currency: 'USD',
  notifications: {
    email: true,
    push: true,
    sms: false,
    paymentAlerts: true,
    expenseAlerts: true,
    employeeAlerts: false,
    systemAlerts: true,
    weeklyReport: true,
    monthlyReport: true,
  },
  privacy: {
    profileVisibility: 'team',
    dataSharing: false,
    analyticsTracking: true,
    marketingEmails: false,
  },
}

export const mockSystemSettings: SystemSettings = {
  companyName: 'NASHK SP Solutions',
  companyLogo: '/logo.png',
  defaultCurrency: 'USD',
  defaultTimezone: 'America/New_York',
  fiscalYearStart: 'January',
  taxRate: 8.5,
  features: {
    paymentsModule: true,
    expensesModule: true,
    employeesModule: true,
    reportsModule: true,
    apiAccess: false,
    multiCurrency: false,
    recurringPayments: true,
    bulkOperations: true,
  },
  integrations: {
    stripeEnabled: true,
    paypalEnabled: false,
    slackEnabled: true,
    googleWorkspaceEnabled: false,
    quickbooksEnabled: false,
    webhookUrl: 'https://api.company.com/webhooks',
  },
  security: {
    twoFactorAuth: true,
    sessionTimeout: 480, // 8 hours in minutes
    passwordPolicy: {
      minLength: 8,
      requireUppercase: true,
      requireLowercase: true,
      requireNumbers: true,
      requireSpecialChars: true,
      expirationDays: 90,
    },
    ipWhitelisting: false,
    auditLogging: true,
  },
}

// ============ DASHBOARD STATS ============
export const mockDashboardStats: DashboardStats = {
  payments: mockPaymentStats,
  expenses: mockExpenseStats,
  employees: mockEmployeeStats,
}

// ============ UTILITY FUNCTIONS ============
export function generateMockPayment(overrides?: Partial<Payment>): Payment {
  return {
    id: generateId(),
    amount: Math.floor(Math.random() * 5000) + 100,
    currency: 'USD',
    status: ['pending', 'completed', 'failed'][Math.floor(Math.random() * 3)] as Payment['status'],
    type: ['credit', 'debit'][Math.floor(Math.random() * 2)] as Payment['type'],
    method: ['credit_card', 'bank_transfer', 'digital_wallet'][Math.floor(Math.random() * 3)] as Payment['method'],
    description: `Payment ${Math.random().toString(36).substring(7)}`,
    reference: `PAY-${new Date().getFullYear()}-${('0000' + Math.floor(Math.random() * 9999)).slice(-4)}`,
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  }
}

export function generateMockExpense(overrides?: Partial<Expense>): Expense {
  const categories: Expense['category'][] = ['setup_purchase', 'rent_bill_guest', 'material', 'logistic', 'outsource']
  return {
    id: generateId(),
    amount: Math.floor(Math.random() * 1000) + 10,
    currency: 'USD',
    category: categories[Math.floor(Math.random() * categories.length)],
    status: ['draft', 'submitted', 'approved', 'rejected'][Math.floor(Math.random() * 4)] as Expense['status'],
    description: `Expense ${Math.random().toString(36).substring(7)}`,
    date: new Date(),
    employeeId: `emp_${Math.floor(Math.random() * 100)}`,
    employeeName: `Employee ${Math.random().toString(36).substring(7)}`,
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  }
}

export function generateMockEmployee(overrides?: Partial<Employee>): Employee {
  const roles: EmployeeRole[] = ['employee', 'manager', 'developer', 'designer', 'contractor']
  const types: EmployeeType[] = ['contractual', 'fixed']
  const selectedType = types[Math.floor(Math.random() * types.length)]
  
  const baseEmployee = {
    id: generateId(),
    firstName: `FirstName${Math.random().toString(36).substring(7)}`,
    lastName: `LastName${Math.random().toString(36).substring(7)}`,
    phone: `+1-555-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`,
    role: roles[Math.floor(Math.random() * roles.length)],
    type: selectedType,
    status: 'active' as EmployeeStatus,
    hireDate: new Date(),
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  }

  if (selectedType === 'contractual') {
    return {
      ...baseEmployee,
      type: 'contractual',
      totalEarned: Math.floor(Math.random() * 5000),
      advancePaid: Math.floor(Math.random() * 500),
      balance: 0,
      workRecords: [],
      salaryPayments: [],
      advances: [],
    } as ContractualEmployee
  } else {
    return {
      ...baseEmployee,
      type: 'fixed',
      monthlySalary: Math.floor(Math.random() * 5000) + 3000,
      paidAmount: Math.floor(Math.random() * 4000),
      balance: 0,
      salaryPayments: [],
    } as FixedEmployee
  }
}